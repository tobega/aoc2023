def input: [$IN::lines -> [$...]];

templates find-expansion-points
  def in: $;
  { ys: $ -> \[y](<~[<='#'>]> ($y)"1" !\),
    xs: $(first) -> \[x](<?($in(first..last; $x) <~[<='#'>]>)> ($x)"1" !\)
  } !
end find-expansion-points

templates expand&{vs:, by:}
  def in: $;
  @: $;
  $vs... -> #
  $@!
  when <..~$in> do @: $@ + $by;
end expand

templates create-pairs
  @: $;
  $::first..$::last -> {a: $@($), by $@($~..last)... -> (b:$)}!
end create-pairs

templates manhattan-distance
  templates abs
    <?($::raw <..~0>)> -$!
    otherwise $!
  end abs
  ($.b.x - $.a.x -> abs) + ($.b.y - $.a.y -> abs) !
end manhattan-distance

def expansion-points: $input -> find-expansion-points;

// part 1
$input -> [$ -> \[y; x](<='#'> {x: ($x)"1", y: ($y)"1"} !\)... ...
  -> {x: $.x -> expand&{vs: $expansion-points.xs, by: 1"1"},
      y: $.y -> expand&{vs: $expansion-points.ys, by: 1"1"}
  }]
-> create-pairs -> manhattan-distance -> ..=Sum&{of: :()} -> !OUT::write

// part 2
$input -> [$ -> \[y; x](<='#'> {x: ($x)"1", y: ($y)"1"} !\)... ...
  -> {x: $.x -> expand&{vs: $expansion-points.xs, by: 999999"1"},
      y: $.y -> expand&{vs: $expansion-points.ys, by: 999999"1"}
  }]
-> create-pairs -> manhattan-distance -> ..=Sum&{of: :()} -> !OUT::write
