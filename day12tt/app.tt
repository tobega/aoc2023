composer parse-record
  {row: [<='#'|='.'|='?'>+], (<WS>) damaged: [<damaged>+]}
  rule damaged: <INT> (<=','>?)
end parse-record

def records: [$IN::lines -> parse-record];

templates find-arrangements
  def in: $;
  @: {arrangements: 0"1",
    cache: 0:[0:[1"1", 1..$in.damaged::length -> 0"1"],
      1..$in.row::length + 1 -> 0:[0..$in.damaged::length -> -1"1"]
    ]};
  {$in..., row: [$.row..., '.']} -> #
  $@.arrangements!

  when <?($@.cache($.row::length; $.damaged::length) <0"1"..>)> do
    $@.cache($.row::length; $.damaged::length) !

  when <{row: <[<='.'|='?'>* VOID]>, damaged: <[](0)>}> do
    @.cache($.row::length; $.damaged::length): 1"1";
    1"1" !

  when <{damaged: <[](0)|[<$.row::length..>]>}> do
    @.cache($.row::length; $.damaged::length): 0"1";
    0"1" !

  when <{row: <?($(1) <='.'>)>}> do
    def result: {$..., row: $.row(first~..last)} -> #;
    @.cache($.row::length; $.damaged::length): $result;
    $result !

  when <{row: <?($(1) <='#'>)>} ?($.row(1..$.damaged(1)) <[<='#'|='?'>* VOID]>) ?($.row($.damaged(1)+1) <='.'|='?'>)> do
    def result: {damaged: $.damaged(first~..last), row: $.row($.damaged(1)+1~..last)} -> #;
    @.cache($.row::length; $.damaged::length): $result;
    $result !

  when <{row: <?($(1) <='#'>)>}> do
    @.cache($.row::length; $.damaged::length): 0"1";
    0"1" !

  when <{row: <?($(1) <='?'>)>} ?($.row(1..$.damaged(1)) <[<='#'|='?'>* VOID]>) ?($.row($.damaged(1)+1) <='.'|='?'>)> do
    def hash: {damaged: $.damaged(first~..last), row: $.row($.damaged(1)+1~..last)} -> #;
    def dot: {$..., row: $.row(first~..last)} -> #;
    @.cache($.row::length; $.damaged::length): $hash + $dot;
    $hash + $dot !

  when <{row: <?($(1) <='?'>)>}> do
    def result: {$..., row: $.row(first~..last)} -> #;
    @.cache($.row::length; $.damaged::length): $result;
    $result !

  otherwise 'wtf'!
end find-arrangements

// part 1
$records... -> find-arrangements -> ..=Sum&{of: :()} -> !OUT::write
'
' -> !OUT::write

templates unfold
  def folded: $;
  {row: [$folded.row..., 1..4 -> \('?'! $folded.row...! \)],
   damaged: [1..5 -> $folded.damaged...]} !
end unfold

// part 2
$records... -> unfold -> find-arrangements -> ..=Sum&{of: :()} -> !OUT::write
