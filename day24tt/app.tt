use 'java:java.math' stand-alone

composer parse-hailstone
  {x: <INT> -> math/BigInteger::valueOf (<=','> <WS>),
   y: <INT> -> math/BigInteger::valueOf (<=','> <WS>),
   z: <INT> -> math/BigInteger::valueOf, (<=' @'> <WS>)
   xv: <INT> -> math/BigInteger::valueOf (<=','> <WS>),
   yv: <INT> -> math/BigInteger::valueOf (<=','> <WS>),
   zv: <INT> -> math/BigInteger::valueOf}
end parse-hailstone

def hailstones: [$IN::lines -> parse-hailstone];

templates to-xy-eq // put into ax + by + c = 0 form
  def val: $;
  def c1: $val.y -> val.xv::multiply;
  def c2: $val.x -> val.yv::multiply;
  { x: $.x,
    xv: $.xv,
    a: $.yv,
    b: $.xv::negate,
    c: $c2 -> c1::subtract
   } !
end to-xy-eq

// This should work, but the numbers overflow a long
operator (l1 intersect l2) // using Cramer's rule, x is Dx/D, y is Dy/D
  def D1: $l2.b -> l1.a::multiply;
  def D2: $l2.a -> l1.b::multiply;
  def D: $D2 -> D1::subtract;
  def Dx1: $l1.c::negate -> l2.b::multiply;
  def Dx2: $l2.c::negate -> l1.b::multiply;
  def Dx: $Dx2 -> Dx1::subtract;
  def Dy1: $l2.c::negate -> l1.a::multiply;
  def Dy2: $l1.c::negate -> l2.a::multiply;
  { D: $D,
    Dx: $Dx,
    Dy: $Dy2 -> Dy1::subtract,
    Dt1: $l1.x -> D::multiply -> Dx::subtract -> \(def val: $; $l1.xv -> val::divide !\), // truncation doesn't matter, ambiguous if zero
    Dt2: $l2.x -> D::multiply -> Dx::subtract -> \(def val: $; $l2.xv -> val::divide !\) // truncation doesn't matter, ambiguous if zero
  } !
end intersect

templates count-pairwise-intersections&{min:, max:}
  def zero: 0 -> math/BigInteger::valueOf;
  def xys: [$... -> to-xy-eq];
  @: 0;
  1..$xys::length -> [$, by $~..$xys::length] -> ($xys($(1)) intersect $xys($(2))) -> #
  $@!

  when <?($.D -> zero::compareTo <..~0>)
  ?($.Dt1 -> zero::compareTo <..0>)
  ?($.Dt2 -> zero::compareTo <..0>)> do
    def Dmin: $.D -> min::multiply;
    def Dmax: $.D -> max::multiply;
    {xmin: $.Dx -> Dmin::compareTo, xmax: $.Dx -> Dmax::compareTo, ymin: $.Dy -> Dmin::compareTo, ymax: $.Dy -> Dmax::compareTo}
    -> \(<{xmin: <..0>, xmax: <0..>, ymin: <..0>, ymax: <0..>}> $! \) -> @: $@ + 1;

  when <?($.D -> zero::compareTo <0~..>)
  ?($.Dt1 -> zero::compareTo <0..>)
  ?($.Dt2 -> zero::compareTo <0..>)> do
    def Dmin: $.D -> min::multiply;
    def Dmax: $.D -> max::multiply;
    {xmin: $.Dx -> Dmin::compareTo, xmax: $.Dx -> Dmax::compareTo, ymin: $.Dy -> Dmin::compareTo, ymax: $.Dy -> Dmax::compareTo}
    -> \(<{xmin: <0..>, xmax: <..0>, ymin: <0..>, ymax: <..0>}> $! \) -> @: $@ + 1;

  otherwise
    //'no $; $:$.D*$min; $:$.D*$max;$#10;' -> !OUT::write
    !VOID    
end count-pairwise-intersections

test 'example'
  use shadowed core-system/
    processor MockIn
      source lines
        [
          '19, 13, 30 @ -2,  1, -2',
          '18, 19, 22 @ -1, -1, -2',
          '20, 25, 34 @ -2, -2, -4',
          '12, 31, 28 @ -1, -2, -1',
          '20, 19, 15 @  1, -5, -3'
        ]... !
      end lines
    end MockIn
    def IN: $MockIn;
  end core-system/

  assert $hailstones -> count-pairwise-intersections&{min: 7 -> math/BigInteger::valueOf, max: 27 -> math/BigInteger::valueOf} <=2> 'part 1'
end 'example'

// part 1
$hailstones -> count-pairwise-intersections&{
  min: 200000000000000 -> math/BigInteger::valueOf,
  max: 400000000000000 -> math/BigInteger::valueOf
} -> !OUT::write
