composer parse-instructions
  [<instruction>+]
  rule instruction: <~=','> (<=','>?)
end parse-instructions

def instructions: $IN::readline -> parse-instructions;

templates HASH
  @: 0;
  $::asCodePoints ... -> @: (($ + $@) * 17) mod 256;
  $@!
end HASH

// part1
$instructions... -> HASH -> ..=Sum&{of: :()} -> !OUT::write
'
' -> !OUT::write

composer parse-instruction
  { label: <'[^=-]+'> , lens: <remove|set> }
  rule remove: <='-'> -> -1
  rule set: (<='='>) <INT>
end parse-instruction

templates map
  @: {||};
  $... -> #
  $@ !
  when <{lens: <=-1>}> do @: ($@ notMatching {|{label: $.label}|});
  otherwise
    def instruction: { $..., box: $.label::raw -> HASH};
    ($@ matching {|{label: $.label}|})
      -> \(
        when <?($::count <=0>)> do $instruction !
        otherwise {$instruction..., id: $... -> $.id} !
      \) -> @: (($@ notMatching {|{label: $.label}|}) union {|$|});
end map

operator (a byId b)
  $a -> #
  when <{id: <..~$b.id>}> do -1 !
  when <{id: <$b.id~..>}> do 1 !
  otherwise 0 !
end byId

templates bubblesort&{compare:}
  templates bubble
    @: 1;
    1..$-1 -> #
    $@ !
    when <?(($@bubblesort($+1) compare $@bubblesort($)) <..~0>)> do
      @: $;
      def temp: $@bubblesort($@);
      @bubblesort($@): $@bubblesort($@+1);
      @bubblesort($@+1): $temp;
  end bubble

  @: $;
  $::length -> #
  $@ !

  when <2..> do
    $ -> bubble -> #
end bubblesort

$instructions -> \[i]({id: $i, $ -> parse-instruction}!\) -> map
  -> $(collect {slots: List&{of: :()}} by $({box:})) ...
  -> $.slots
  -> bubblesort&{compare: byId}
  -> \[i](($.box::raw + 1) * $i * $.lens::raw !\) ...
  -> ..=Sum&{of: :()} -> !OUT::write
